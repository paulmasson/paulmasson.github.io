<!DOCTYPE html>
<html>
<head>
<title></title>
<meta charset=utf-8>
<meta name=viewport content='width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0'>
<style>

body { margin: 0px; overflow: hidden; }
  
</style>
</head>

<body>

<script src=https://cdn.rawgit.com/mrdoob/three.js/r80/build/three.min.js></script>
<script src=https://cdn.rawgit.com/mrdoob/three.js/r80/examples/js/controls/OrbitControls.js></script>

<script>

var scene = new THREE.Scene();

var renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setClearColor( 0xffffff, 1 );
document.body.appendChild( renderer.domElement );

var lights = [{x:0, y:0, z:10}, {x:0, y:0, z:-10}];
for ( var i=0 ; i < lights.length ; i++ ) {
  var light = new THREE.DirectionalLight( 0xdddddd, 1 );
  light.position.set( lights[i].x, lights[i].y, lights[i].z );
  scene.add( light );
}

scene.add( new THREE.AmbientLight( 0x404040, 1 ) );

var camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );
camera.up.set( 0, 0, 1 );
camera.position.set( 4, 4, 4 );
camera.lookAt( scene.position );

var controls = new THREE.OrbitControls( camera, renderer.domElement );

var geometry = new THREE.BoxGeometry(1,1,1);

var material = new THREE.MeshPhongMaterial( {
                      color: 'cyan' , side: THREE.DoubleSide,
                      transparent: true, opacity: .5,
                      shininess: 20 } );

// cube at 1, 1, 1
addSurface( {vertices:[{x:1.5,y:1.5,z:1.5},{x:0.5,y:1.5,z:1.5},{x:0.5,y:0.5,z:1.5},{x:1.5,y:0.5,z:1.5},{x:1.5,y:1.5,z:0.5},{x:0.5,y:1.5,z:0.5},{x:1.5,y:0.5,z:0.5},{x:0.5,y:0.5,z:0.5}], faces:[[0,1,2,3],[0,4,5,1],[0,3,6,4],[5,4,6,7],[6,3,2,7],[2,1,5,7]] } );

c1 = new THREE.Mesh( geometry, material ) ;
c1.position.set( -1, 1, 1);
scene.add( c1 );

// cube at -1, -1, 1
addSurface( {vertices:[{x:-0.5,y:-0.5,z:1.5},{x:-1.5,y:-0.5,z:1.5},{x:-1.5,y:-1.5,z:1.5},{x:-0.5,y:-1.5,z:1.5},{x:-0.5,y:-0.5,z:0.5},{x:-1.5,y:-0.5,z:0.5},{x:-0.5,y:-1.5,z:0.5},{x:-1.5,y:-1.5,z:0.5}], faces:[[0,1,2,3],[0,4,5,1],[0,3,6,4],[5,4,6,7],[6,3,2,7],[2,1,5,7]] } );

c2 = new THREE.Mesh( geometry, material ) ;
c2.position.set( 1, -1, 1 )
scene.add( c2 );

// cube at -1, 1, -1
addSurface( {vertices:[{x:-0.5,y:1.5,z:-0.5},{x:-1.5,y:1.5,z:-0.5},{x:-1.5,y:0.5,z:-0.5},{x:-0.5,y:0.5,z:-0.5},{x:-0.5,y:1.5,z:-1.5},{x:-1.5,y:1.5,z:-1.5},{x:-0.5,y:0.5,z:-1.5},{x:-1.5,y:0.5,z:-1.5}], faces:[[0,1,2,3],[0,4,5,1],[0,3,6,4],[5,4,6,7],[6,3,2,7],[2,1,5,7]]} );

c3 = new THREE.Mesh( geometry, material ) ;
c3.position.set( -1, -1, -1 )
scene.add( c3 );

// cube at 1, -1, -1
addSurface( {vertices:[{x:1.5,y:-0.5,z:-0.5},{x:0.5,y:-0.5,z:-0.5},{x:0.5,y:-1.5,z:-0.5},{x:1.5,y:-1.5,z:-0.5},{x:1.5,y:-0.5,z:-1.5},{x:0.5,y:-0.5,z:-1.5},{x:1.5,y:-1.5,z:-1.5},{x:0.5,y:-1.5,z:-1.5}], faces:[[0,1,2,3],[0,4,5,1],[0,3,6,4],[5,4,6,7],[6,3,2,7],[2,1,5,7]]} );

c4 = new THREE.Mesh( geometry, material ) ;
c4.position.set( 1, 1, -1 )
scene.add( c4 );


function addSurface( json ) {
  var geometry = new THREE.Geometry();
  for ( var i=0 ; i < json.vertices.length ; i++ ) {
    var v = json.vertices[i];
    geometry.vertices.push( new THREE.Vector3( v.x, v.y, v.z ) );
  }
  for ( var i=0 ; i < json.faces.length ; i++ ) {
    var f = json.faces[i];
    for ( var j=0 ; j < f.length - 2 ; j++ ) {
      geometry.faces.push( new THREE.Face3( f[0], f[j+1], f[j+2] ) );
    }
  }
  geometry.computeVertexNormals();

  scene.add( new THREE.Mesh( geometry, material ) );
}


function render() {

  requestAnimationFrame( render );
  renderer.render( scene, camera );

}

render();

</script>

</body>
</html>